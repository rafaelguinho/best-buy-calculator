[{"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/index.js":"1","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/util/units.js":"2","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/modules/unit.js":"3","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/modules/bestBuyCalculator.js":"4","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/calculator/BestBuy.jsx":"5","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/state/initialState.js":"6","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/reducers/bestBuyReducer.js":"7","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/modules/product.js":"8","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/components/BestBuyTooltipMessage.jsx":"9","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/App.js":"10","/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/reportWebVitals.js":"11"},{"size":457,"mtime":1612522507388,"results":"12","hashOfConfig":"13"},{"size":406,"mtime":1612781905767,"results":"14","hashOfConfig":"13"},{"size":175,"mtime":1610360363501,"results":"15","hashOfConfig":"13"},{"size":1143,"mtime":1611053026269,"results":"16","hashOfConfig":"13"},{"size":6921,"mtime":1612780994986,"results":"17","hashOfConfig":"13"},{"size":595,"mtime":1610966462720,"results":"18","hashOfConfig":"13"},{"size":1187,"mtime":1610966563936,"results":"19","hashOfConfig":"13"},{"size":544,"mtime":1610964618946,"results":"20","hashOfConfig":"13"},{"size":1117,"mtime":1612781741074,"results":"21","hashOfConfig":"13"},{"size":217,"mtime":1612436964070,"results":"22","hashOfConfig":"13"},{"size":362,"mtime":1609756589125,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"110sdm5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/index.js",[],["54","55"],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/util/units.js",[],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/modules/unit.js",[],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/modules/bestBuyCalculator.js",["56"],"class BestBuyCalculator {\n    constructor(products) {\n        if (products === null || products.length === 0) {\n            throw \"You must pass a product\"\n        }\n\n        this.products = products;\n    }\n\n    compare() {\n\n        const filledProducts = this.products.filter(p => p.allValuesFilled());\n        if (filledProducts.length < 2) return null;\n\n        var minPrice = this.products[0].priceByBasicUnit();\n        var mostFavourable = this.products[0];\n        var savedMoney = 0;\n\n\n\n        filledProducts.forEach(p => {\n            if (p.priceByBasicUnit() < minPrice) {\n                mostFavourable = p;\n            }\n        });\n\n        filledProducts.forEach(p => {\n            var priceByBasicUnitAmount = p.priceByBasicUnitAmount(mostFavourable.amountByBasicUnit());\n            var saved = priceByBasicUnitAmount - mostFavourable.price;\n\n            saved = Math.round(saved * 100) / 100;\n\n            if (saved > savedMoney) {\n                savedMoney = saved\n            }\n        });\n\n        return {\n            mostFavourable: { ...mostFavourable, savedMoney }\n        }\n    }\n}\n\nexport default BestBuyCalculator;",["57","58"],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/calculator/BestBuy.jsx",["59"],"import React, { useEffect, useReducer } from \"react\";\nimport Product from \"../modules/product\";\nimport BestBuyCalculator from \"../modules/bestBuyCalculator\";\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\";\nimport reducer from \"../reducers/bestBuyReducer\";\nimport initialState from \"../state/initialState\";\nimport { units } from \"../util/units\";\nimport BestBuyTooltipMessage from \"../components/BestBuyTooltipMessage\";\nimport { faTrashAlt, faPlusCircle, faTrophy } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CurrencyFormat from 'react-currency-format';\n\nfunction BestBuy() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const { register, setValue, getValues, control, handleSubmit } = useForm({\n    defaultValues: { products: [{ amount: '', price: '', unit: '' }, { amount: '', price: '', unit: '' }] },\n  });\n\n  const { fields, append, remove } = useFieldArray({ control, name: \"products\" });\n\n  const fieldChanged = (e) => {\n    dispatch({ type: \"anyFieldChanged\" });\n\n    const formValues = getValues();\n\n    const products = formValues.products.map(\n      (f) => new Product(f.id, f.price, f.amount, findUnit(f.unit))\n    );\n\n    const calculator = new BestBuyCalculator(products);\n\n    const result = calculator.compare();\n\n    if (result) {\n      dispatch({ type: \"moreFavourableProductFound\", payload: result });\n    }\n\n    console.log(result);\n  };\n\n  const onSubmit = (data) => console.log(data);\n\n  useEffect(() => {\n    const clearAllOtherSelects = (index) => {\n      fields.forEach((item, idx) => {\n        if (idx === index) return;\n\n        setValue(`products[${idx}].unit`, null);\n      });\n    };\n    clearAllOtherSelects(0);\n  }, [state.primarySelectedUnit, fields, setValue]);\n\n  const findUnit = (unitName) => {\n    if (!unitName) return null;\n    return units.find((u) => u.label === unitName);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)}>\n\n\n        {fields.map((field, index) => {\n          const fieldName = `products[${index}]`;\n\n          const options =\n            index === 0 ? state.primaryOptions : state.secondaryOptions;\n\n          const isTheBestBuy =\n            field.id === state.moreFavourableProduct?.mostFavourable?.id;\n\n          return (\n            <fieldset className={isTheBestBuy ? 'best' : ''} name={field.id} key={field.id}>\n\n              {isTheBestBuy ?\n                <div className=\"best-container\">\n                  <strong><FontAwesomeIcon icon={faTrophy} size=\"1x\" /> Melhor</strong>\n\n                  <BestBuyTooltipMessage\n                    isTheBestBuy={isTheBestBuy}\n                    moreFavourableProduct={\n                      state.moreFavourableProduct?.mostFavourable\n                    }\n                  />\n                </div>\n                : <></>}\n\n              <div className=\"form-fields\">\n\n                <input\n                  type=\"hidden\"\n                  ref={register()}\n                  name={`${fieldName}.id`}\n                  defaultValue={field.id}\n                />\n\n                <div className=\"Label-field\">\n                  <input className=\"input\"\n                    placeholder=\"Quantidade\"\n                    ref={register()}\n                    onChange={fieldChanged}\n                    type=\"number\"\n                    step=\"0.01\"\n                    name={`${fieldName}.amount`}\n                    defaultValue={`${field.amount}`}\n                  />\n                </div>\n\n                <div className=\"Label-field\">\n\n\n                  <Controller\n                    control={control}\n                    name={`${fieldName}.price`}\n                    render={(\n                      { onChange }\n                    ) => (\n                      <CurrencyFormat className=\"input\"\n                        placeholder=\"PreÃ§o R$\"\n                        fixedDecimalScale={true}\n                        thousandSeparator={true}\n                        prefix={'R$ '}\n                        onValueChange={(values) => {\n                          const { floatValue, value } = values;\n\n                          onChange(floatValue);\n                          fieldChanged();\n                        }} />\n\n                    )}\n                  />\n\n\n                </div>\n\n                <div className=\"select Label-field\">\n                  <select\n                    className=\"unit-select\"\n                    name={`${fieldName}.unit`}\n                    defaultValue={`${field.unit}`}\n                    ref={register()}\n                    onChange={(e) => {\n                      const selectIndex = e.nativeEvent.target.selectedIndex;\n\n                      const value = e.target.value;\n                      const label = e.nativeEvent.target[selectIndex].text;\n                      const type =\n                        e.nativeEvent.target[selectIndex].attributes[\"data-type\"]\n                          .value;\n\n                      const optionPayload = { value, label, type };\n\n                      if (index === 0) {\n                        dispatch({\n                          type: \"selectPrimaryOption\",\n                          payload: optionPayload,\n                        });\n                      } else {\n                        dispatch({\n                          type: \"selectSecondaryOption\",\n                          payload: { index, item: optionPayload },\n                        });\n                      }\n\n                      fieldChanged(e);\n                    }}\n                  >\n                    {options.map((item) => (\n                      <option\n                        key={item.value}\n                        data-type={item.type}\n                        value={item.value}\n                      >\n                        {item.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"button-container\">\n                  <button\n                    className='button'\n                    type=\"button\"\n                    disabled={index <= 1}\n                    onClick={() => {\n                      remove(index);\n                      console.log(index);\n                      console.log(fields);\n                    }}\n                  >\n\n                    <FontAwesomeIcon icon={faTrashAlt} size=\"1x\" />\n                  </button>\n                </div>\n              </div>\n            </fieldset>\n          );\n        })}\n        <div className=\"button-container append\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              append({});\n            }}\n          >\n            <FontAwesomeIcon icon={faPlusCircle} size=\"1x\" /> Add\n        </button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default BestBuy;\n",["60","61"],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/state/initialState.js",[],["62","63"],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/reducers/bestBuyReducer.js",[],["64","65"],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/modules/product.js",[],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/components/BestBuyTooltipMessage.jsx",[],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/App.js",["66"],"/home/rafaelguinho/Documents/coding/js/react/best-buy-calculator/src/reportWebVitals.js",[],["67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":4,"column":13,"nodeType":"75","messageId":"76","endLine":4,"endColumn":44},{"ruleId":"69","replacedBy":"77"},{"ruleId":"71","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":126,"column":47,"nodeType":"81","messageId":"82","endLine":126,"endColumn":52},{"ruleId":"69","replacedBy":"83"},{"ruleId":"71","replacedBy":"84"},{"ruleId":"69","replacedBy":"85"},{"ruleId":"71","replacedBy":"86"},{"ruleId":"69","replacedBy":"87"},{"ruleId":"71","replacedBy":"88"},{"ruleId":"79","severity":1,"message":"89","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"69","replacedBy":"90"},{"ruleId":"71","replacedBy":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object",["92"],["93"],"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar",["92"],["93"],["92"],["93"],["92"],["93"],"'logo' is defined but never used.",["92"],["93"],"no-global-assign","no-unsafe-negation"]